'''
	Modules to import
'''
import csv
import mysql.connector

'''
	Variables
'''
# Name of the database
datbaseName = 'prueba'
# does the dabase already exists
isCreated = False
# Connection to de DB server
mydb = mysql.connector.connect(host = "localhost", user = "root", passwd = "Control2019*", buffered = True)
# db manager
mycursor = mydb.cursor()

'''
	functions
'''
'''
Creates the database
'''
def CreateDB ():

	# Creates the database with the name in the dabaseName variable
	mycursor.execute("CREATE DATABASE prueba")
	# Indicates what database is going to be used
	mycursor.execute("USE " + datbaseName)
	#Creates the tables
	CreateTables()
	fillTables()
	mycursor.execute("commit")

'''
	Creates the tables of the database
'''
def CreateTables ():

	# Creates the client table
	# nit: PRIMARY KEY, nit of the enterprise
	# ClientName: name of the enterpise
	mycursor.execute("CREATE TABLE client (nit VARCHAR(255) PRIMARY KEY, clientName VARCHAR(255) unique)")
	
	# Creates the contact table
	# id: PRIMARY KEY, 'cedula' of the contact
	# contactName: name of the person
	# clientID: foreign key, Nit of the company the person works for
	# password: password of the user
	mycursor.execute("CREATE TABLE contact (id int PRIMARY KEY, contactName VARCHAR(255), clientId VARCHAR(255), password VARCHAR(255), FOREIGN KEY (clientId) REFERENCES client (nit))")

	# Creates the servers table
	# codServicio: PRIMARY KEY, code with wich teh server is identified internally
	# hostname: The name given to the client
	# clientID: Nit of the client who has services hosted in the server
	mycursor.execute("CREATE TABLE servers (codServicio VARCHAR(255) PRIMARY KEY, hostname VARCHAR(255) unique, clientId VARCHAR(255), FOREIGN KEY (clientId) REFERENCES client (nit) )")

	# Creates the services table
	# serviceId: PRIMARY KEY, autogenerated integer
	mycursor.execute("CREATE TABLE services (serviceId int PRIMARY KEY AUTO_INCREMENT, serviceName VARCHAR(255) unique)")

	# Creates the table where the cases created are stored
	# id: id of the agent (usuario de red)
	# nombre: name of the agent
	# ext: phone extension of the person
	mycursor.execute("CREATE TABLE agents (id VARCHAR(255) PRIMARY KEY, nombre varchar(255), ext int)")

	# Creates the table that identifies which services are in which servers
	# id: PRIMARY KEY, autogenerated integer
	# serviceId: FOREIGN KEY, identifies a service in the service table
	# codServicio: FOREIGN KEY, identifies a server in the server table
	mycursor.execute("CREATE TABLE servicesInServer(id int PRIMARY KEY AUTO_INCREMENT, serviceId int, codServicio VARCHAR(255), FOREIGN KEY (serviceId) REFERENCES services (serviceId), FOREIGN KEY (codServicio) REFERENCES servers (codServicio) )")

	# Creates the table of cases created by the contacts
	# numero: Id of the case
	# titulo: tittle of the case
	# descripcion: description of the requeriment
	# cfaseActual:the actual phase of the case
	# Estado: state of the case
	# solicitante: persona that creates the case
	# nombreContacto: name of the user
	# CompaniaNombre: name of the company
	# GrupoAsignacion: group to whom it was assigned
	# asignatario: person to whom it was assigned
	# categoria: category of the case
	# subcategoria: subcategory of the case
	# modelo: model of the case
	# motivo: motive of the case
	# ServAfectado: afected service
	# CIAfectado: afected machine
	# Impacto: impact of the case
	# Urgencia: urgency of the case
	# prioridad: priority
	# Origen: 
	# accionActualizacion: last update
	mycursor.execute("CREATE TABLE cases (numero VARCHAR(255) PRIMARY KEY, titulo VARCHAR(255) not null, descripcion LONGTEXT not null, faseActual varchar (255) not null, Estado varchar (255) not null, solicitante int not null, NombreContacto varchar (255), companiaNombre varchar (255) not null, GrupoAsignacion varchar (255), asignatario varchar(255), categoria varchar (255), subcategoria varchar (255), modelo varchar (255), motivo varchar (255), servAfectado varchar(255), CIAfectado varchar(255), impacto varchar(255), urgencia varchar(255), prioridad varchar (255), origen int not null, accionActualización LONGTEXT, FOREIGN KEY (solicitante) references contact (id), FOREIGN KEY (companiaNombre) references client(clientName), FOREIGN KEY (asignatario) references agents (id), FOREIGN KEY (CIAfectado) references servers(hostname), FOREIGN KEY (servAfectado) references services(serviceName))")

	# Creates the table of events generated
	# idEvento: unique identifier of the event
	# descripcion: description of what is happening
	# codServicio: code of the affected ci
	# fecha: Date in which the event is generated
	#cliente: identifier of the client owner of the ci
	mycursor.execute("CREATE table eventos (idEvento int PRIMARY KEY auto_increment, descripcion VARCHAR(255), codServicio VARCHAR(255),fecha datetime, cliente varchar(255), FOREIGN KEY (codServicio) references servers (codServicio), FOREIGN KEY (cliente) references `client` (nit) )")
'''
Fills the tables of the database with the information in the csvs in the array
'''
def fillTables():
	# files = ['client', 'contact', 'servers', 'services', 'agents','servicesInServer', 'cases', 'eventos']
	files = ['cases']
	# tuples = ['(nit, clientName)', '(id, contactName, clientId, password)', '(codServicio, hostname, clientId)', '(serviceId, serviceName)', '(id, nombre, ext)','(serviceId, codServicio)', '(numero, titulo, descripcion, faseActual, Estado, solicitante, NombreContacto, companiaNombre, GrupoAsignacion, asignatario, categoria, subcategoria, modelo, motivo, servAfectado, CIAfectado, impacto, urgencia, prioridad, origen, accionActualización)','(idEvento, descripcion, codServicio, fecha, cliente)']
	tuples = ['(numero, titulo, descripcion, faseActual, Estado, solicitante, NombreContacto, companiaNombre, GrupoAsignacion, asignatario, categoria, subcategoria, modelo, motivo, servAfectado, CIAfectado, impacto, urgencia, prioridad, origen, accionActualización)']
	cont = 0
	for i in range(len(files)):
		with open(files[i] + '.csv', 'r') as file:
			reader = csv.reader(file, delimiter = ';')
			if files[i] == 'client':
				for row in reader:
					mysql = "INSERT INTO {file} {tuple} VALUES ({values});".format(file = files[i], tuple = tuples[i], values = '\'' + row[0] + '\', \'' + row[1] + '\'')
					#print(mysql)
					mycursor.execute(mysql)
				mycursor.execute("commit")
			elif files[i] == 'contact':
				for row in reader:
					mysql = "INSERT INTO {file} {tuple} VALUES ({values});".format(file = files[i], tuple = tuples[i], values = '\'' + row[0] + '\', \'' + row[1] + '\', \'' + row[2] + '\', \'' + row[3] + '\'')
					#print(mysql)
					mycursor.execute(mysql)
				mycursor.execute("commit")
			elif files[i] == 'servers':
				for row in reader:
					mysql = "INSERT INTO {file} {tuple} VALUES ({values});".format(file = files[i], tuple = tuples[i], values = '\'' + row[0] + '\', \'' + row[1] + '\', \'' + row[2] + '\'')
					# print(mysql)
					mycursor.execute(mysql)
				mycursor.execute("commit")
			elif files[i] == 'services':
				for row in reader:
					mysql = "INSERT INTO {file} {tuple} VALUES ({values});".format(file = files[i], tuple = tuples[i], values = row[0] + ', \'' + row[1] + '\'')
					# print(mysql)
					mycursor.execute(mysql)
				mycursor.execute("commit")
			elif files[i] == 'servicesInServer':
				for row in reader:
					mysql = "INSERT INTO {file} {tuple} VALUES ({values});".format(file = files[i], tuple = tuples[i], values = '\'' + row[0] + '\', \'' + row[1] + '\'')
					# print(mysql)
					mycursor.execute(mysql)
				mycursor.execute("commit")
			elif files[i] == 'agents':
				for row in reader:
					mysql = "INSERT INTO {file} {tuple} VALUES ({values});".format(file = files[i], tuple = tuples[i], values = '\'' + row[0] + '\', \'' + row[1] + '\',' + row[2])
					# print(mysql)
					mycursor.execute(mysql)
				mycursor.execute("commit")
			elif files[i] == 'cases':
				for row in reader:
					mysql = "INSERT INTO {file} {tuple} VALUES ({values});".format(file = files[i], tuple = tuples[i], values =  '\'' + row[0] + '\', \'' + row[1] + '\', \'' + row[2] + '\', \'' + row[3] + '\', \'' + row[4] + '\',' + row[5] + ', \'' + row[6] + '\', \''+ row[7] + '\', \'' + row[8] + '\', \'' + row[9] + '\', \'' + row[10] + '\', \''+ row[11] + '\', \'' + row[12] + '\', \'' + row[13] + '\', \'' + row[14] + '\', \'' + row[15] + '\', \''+ row[16] + '\', \'' + row[17] + '\', \'' + row[18] + '\',' + row[19] + ',\'' + row[20] + '\'')
					# print(mysql)
					mycursor.execute(mysql)
				mycursor.execute("commit")

'''
Finds a client given by the id of the client
'''
def identifyClient(nit):
	mycursor.execute("USE " + datbaseName)
	mycursor.execute('SELECT * FROM client WHERE nit = \'{}\''.format(nit))
	res = mycursor.fetchall()
	return res

'''
Finds a contact given by the id of the contact
'''
def identifyUser(cedula):
	#cedulaN = int(filter(type(cedula).isdigit, cedula))
	mycursor.execute("USE " + datbaseName)
	mycursor.execute('SELECT contactName, clientId, password FROM contact WHERE id = {}'.format(cedula))
	res = mycursor.fetchall()
	return res

'''
Finds a server given by the id of the server
def findServer(codServicio, clientID):
	mycursor.execute("USE " + datbaseName)
	mycursor.execute('SELECT codServicio FROM servers WHERE hostname = {hostname} and clientId = {clientid}'.format(hostname = codServicio, clientId = clientID))
	res = mycursor.fetchall()
	return res
'''

'''
Finds the servers of a given client
#def findServer(clientID):
	mycursor.execute("USE " + datbaseName)
	mycursor.execute('SELECT codServicio FROM servers WHERE clientId = {clientid}'.format(clientId = clientID))
	res = mycursor.fetchall()
	return res
'''
'''
Finds a service given by the id of the service
#def findService(id):
	mycursor.execute("USE " + datbaseName)
	mycursor.execute('SELECT serviceName FROM services WHERE serviceId = {}'.format(id))
	res = mycursor.fetchall()
	return res
'''

'''
Finds a service given by the id of the service
def findServiceName(name):
	mycursor.execute("USE " + datbaseName)
	mycursor.execute('SELECT * FROM services WHERE serviceName = {}'.format(name))
	res = mycursor.fetchall()
	return res
'''

'''
Finds all the services in a server given by the id of the server
def findServicesInServer(hostName):
	mycursor.execute("USE " + datbaseName)
	mycursor.execute('SELECT * FROM services WHERE serviceName = {}'.format(name))
	res = mycursor.fetchall()
	return res
'''

'''
def findServersOfClient(clientid):
	mycursor.execute("USE " + datbaseName)
	mycursor.execute('SELECT * FROM servers WHERE clientId = {}'.format(clientid))
	res = mycursor.fetchall()
	return res
'''

'''
Finds the services of the client given by parameter
'''
def findServicesOfClient(clientid):
	mycursor.execute("USE " + datbaseName)
	mycursor.execute('SELECT hostname, servers.codServicio, services.serviceId, serviceName FROM services INNER JOIN servicesinserver ON codServicio = codServicio INNER JOIN servers ON servicesinserver.codServicio = servers.codServicio WHERE servers.clientId = \'{}\''.format(clientid))
	res = mycursor.fetchall()
	return res

'''
Creates cases with the info given by parameter
'''
def createCase(numerop, titulop, descripcionp, faseActualp, Estadop, solicitantep, NombreContactop, companiaNombrep, GrupoAsignacionp, asignatariop, categoriap, subcategoriap, modelop, motivop, servAfectadop, CIAfectadop, impactop, urgenciap, prioridadp, origenp, accionActualizacionp):
	mycursor.execute("USE " + datbaseName)
	if CIAfectadop != 'NULL':
		mysql = "INSERT INTO cases (numero, titulo, descripcion, faseActual, Estado, solicitante, NombreContacto, companiaNombre, GrupoAsignacion, asignatario, categoria, subcategoria, modelo, motivo, servAfectado, CIAfectado, impacto, urgencia, prioridad, origen, accionActualización) VALUES (\'{numero}\', \'{titulo}\', \'{descripcion}\', \'{faseActual}\', \'{Estado}\', {solicitante}, \'{NombreContacto}\', \'{companiaNombre}\', {GrupoAsignacion}, {asignatario}, {categoria}, {subcategoria}, {modelo}, {motivo}, {servAfectado}, \'{CIAfectado}\', {impacto}, {urgencia}, {prioridad}, {origen}, {accionActualizacion})".format(numero = numerop, titulo = titulop, descripcion = descripcionp, faseActual = faseActualp, Estado = Estadop, solicitante = solicitantep , NombreContacto = NombreContactop, companiaNombre = companiaNombrep, GrupoAsignacion = GrupoAsignacionp, asignatario = asignatariop, categoria = categoriap, subcategoria = subcategoriap, modelo = modelop, motivo = motivop, servAfectado = servAfectadop, CIAfectado = CIAfectadop, impacto = impactop, urgencia = urgenciap, prioridad = prioridadp, origen = origenp, accionActualizacion = accionActualizacionp)
		# print(mysql)
		mycursor.execute(mysql)
	else: 
		mycursor.execute("INSERT INTO cases (numero, titulo, descripcion, faseActual, Estado, solicitante, NombreContacto, companiaNombre, GrupoAsignacion, asignatario, categoria, subcategoria, modelo, motivo, servAfectado, CIAfectado, impacto, urgencia, prioridad, origen, accionActualización) VALUES (\'{numero}\', \'{titulo}\', \'{descripcion}\', \'{faseActual}\', \'{Estado}\', {solicitante}, \'{NombreContacto}\', \'{companiaNombre}\', {GrupoAsignacion}, {asignatario}, {categoria}, {subcategoria}, {modelo}, {motivo}, \'{servAfectado}\', {CIAfectado}, {impacto}, {urgencia}, {prioridad}, {origen}, {accionActualizacion})").format(numero = numerop, titulo = titulop, descripcion = descripcionp, faseActual = faseActualp, Estado = Estadop, solicitante = solicitantep , NombreContacto = NombreContactop, companiaNombre = companiaNombrep, GrupoAsignacion = GrupoAsignacionp, asignatario = asignatariop, categoria = categoriap, subcategoria = subcategoriap, modelo = modelop, motivo = motivop, servAfectado = servAfectadop, CIAfectado = CIAfectadop, impacto = impactop, urgencia = urgenciap, prioridad = prioridadp, origen = origenp, accionActualizacion = accionActualizacionp)
	mydb.commit()

def getHostName(serviceCode):
	mycursor.execute("SELECT hostname FROM servers WHERE codServicio = \'{}\'".format(serviceCode))
	return mycursor.fetchall()


'''
def obtainServiceCod(hostname):
	mycursor.execute("USE " + datbaseName)
	mycursor.execute('SELECT codServicio from prueba.servers where servers.hostname = \'{}\''.format(hostname))
	res= mycursor.fetchall()
	return res
'''

'''
Finds the code of service from a service.
def findServiceCodeClientService(nitG, servicioG):
	mycursor.execute("USE " + datbaseName)
	mycursor.execute('SELECT servers.codServicio FROM prueba.services inner join servicesinserver on services.serviceId = servicesinserver.serviceId inner join servers on servicesinserver.codServicio = servers.codServicio where servers.clientId = \'{}\' and services.serviceId = {}'.format(nitG, servicioG))
	res = mycursor.fetchall()
	return res
'''

'''
Find the event with codServicio and nitG given by parameters
'''
def areThereEvents(nitG):
	mycursor.execute("USE " + datbaseName)
	mycursor.execute('SELECT idEvento, descripcion, codServicio, fecha FROM eventos where cliente = \'{cli}\''.format(cli = nitG))
	mySQL = mycursor.fetchall()
	return mySQL

'''
Gets the person in charge of a client
'''
def getInChargeCase(caso):
	mycursor.execute("USE " + datbaseName)
	mycursor.execute('SELECT agents.nombre, agents.ext from cases inner join agents on cases.asignatario = agents.id where cases.numero = \'{}\''.format(caso))
	mySQL = mycursor.fetchall()
	return mySQL

'''
Obtains the information of the last update of the case
'''
def lastUpdate(caso):
	mycursor.execute("USE " + datbaseName)
	mycursor.execute('SELECT accionActualización from cases where numero = \'{}\''.format(caso))
	mySQL = mycursor.fetchall()
	return mySQL

'''	
main method, creates the database if run as the principal module
'''
if __name__ == "__main__":
	for x in mycursor:
		# print (x)
		if datbaseName in x:
			isCreated == True
			break
	if not isCreated:
		CreateDB()
		mycursor.execute("commit")
	else:
		# Indicates what database is going to be used
		mycursor.execute("USE " + datbaseName)
		# mycursor.execute("drop schema prueba")
		mycursor.execute("commit")
		CreateDB()
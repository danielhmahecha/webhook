'''
modules for local server
'''

'''
modules for cloud SQL
'''
import mysql.connector

'''
modules to generate inserts
'''
import csv


'''
Environment variables
'''
# Name of the database
db_Name = 'claro'
host = 'localhost'
user = "root"
psswd = "Control2019*"

'''
local mySQL server
'''
# Connection to de DB server
mydb = mysql.connector.connect(host = "localhost", user = user, passwd = pssdw, buffered = True)
# db manager
mycursor = mydb.cursor()

'''
Creates the database
'''
def CreateDB (ubicacion):
	if ubicacion == "local":
		# Creates the database with the name in the dabaseName variable
		mycursor.execute("CREATE DATABASE " + db_Name)
		# Indicates what database is going to be used
		mycursor.execute("USE " + db_Name)
		#Creates the tables
		CreateTables()
		#Commits changes to the data base
		mycursor.execute("commit")

	if ubicacion == "cloud":
		# Indicates what database is going to be used
		mycursor.execute("USE " + db_Name)
		#Creates the tables
		CreateTables()
		#Commits changes to the data base
		mycursor.execute("commit")

'''
Creates the client table
nit: PRIMARY KEY, nit of the enterprise
ClientName: name of the enterpise
'''
def createClient():
	mycursor.execute("CREATE TABLE client (nit VARCHAR(255) PRIMARY KEY, clientName VARCHAR(255) unique)")
	fillClient()

'''
Creates the contact table
id: PRIMARY KEY, 'cedula' of the contact
contactName: name of the person
clientID: foreign key, Nit of the company the person works for
password: password of the user
'''
def createContact():	
	mycursor.execute("CREATE TABLE contact (id int PRIMARY KEY, contactName VARCHAR(255), clientId VARCHAR(255), password VARCHAR(255), FOREIGN KEY (clientId) REFERENCES client (nit))")
	fillContact()
'''
Creates the servers table
codServicio: PRIMARY KEY, code with wich teh server is identified internally
hostname: The name given to the client
clientID: Nit of the client who has services hosted in the server
'''
def createServers():
	mycursor.execute("CREATE TABLE servers (codServicio VARCHAR(255) PRIMARY KEY, hostname VARCHAR(255) unique, clientId VARCHAR(255), FOREIGN KEY (clientId) REFERENCES client (nit))")
	fillServers()

'''
Creates the services table
serviceId: PRIMARY KEY, autogenerated integer
serviceName: Bussines element
'''
def createServices():	
	mycursor.execute("CREATE TABLE services (serviceId int PRIMARY KEY AUTO_INCREMENT, serviceName VARCHAR(255) unique)")
	fillServices()
'''
Creates the table where the cases created are stored
id: id of the agent (usuario de red)
nombre: name of the agent
ext: phone extension of the person
'''
def createAgents():
	mycursor.execute("CREATE TABLE agents (id VARCHAR(255) PRIMARY KEY, nombre varchar(255), ext int)")
	fillAgents()

'''
Creates the table that identifies which services are in which servers
id: PRIMARY KEY, autogenerated integer
serviceId: FOREIGN KEY, identifies a service in the service table
codServicio: FOREIGN KEY, identifies a server in the server table
'''
def createServicesInServer():
	mycursor.execute("CREATE TABLE servicesInServer(id int PRIMARY KEY AUTO_INCREMENT, serviceId int, codServicio VARCHAR(255), FOREIGN KEY (serviceId) REFERENCES services (serviceId), FOREIGN KEY (codServicio) REFERENCES servers (codServicio) )")
	fillServicesInServer()
'''
Creates the table of cases created by the contacts
numero: Id of the case
titulo: tittle of the case
descripcion: description of the requeriment
cfaseActual:the actual phase of the case
Estado: state of the case
solicitante: persona that creates the case
nombreContacto: name of the user
CompaniaNombre: name of the company
GrupoAsignacion: group to whom it was assigned
asignatario: person to whom it was assigned
categoria: category of the case
subcategoria: subcategory of the case
modelo: model of the case
motivo: motive of the case
ServAfectado: afected service
CIAfectado: afected machine
Impacto: impact of the case
Urgencia: urgency of the case
prioridad: priority
Origen: 
accionActualizacion: last update
'''
def createCases():
	mycursor.execute("CREATE TABLE cases (numero VARCHAR(255) PRIMARY KEY, titulo VARCHAR(255) not null, descripcion LONGTEXT not null, faseActual varchar (255) not null, Estado varchar (255) not null, solicitante int not null, NombreContacto varchar (255), companiaNombre varchar (255) not null, GrupoAsignacion varchar (255), asignatario varchar(255), categoria varchar (255), subcategoria varchar (255), modelo varchar (255), motivo varchar (255), servAfectado varchar(255), CIAfectado varchar(255), impacto varchar(255), urgencia varchar(255), prioridad varchar (255), origen int not null, accionActualizaci칩n LONGTEXT, FOREIGN KEY (solicitante) references contact (id), FOREIGN KEY (companiaNombre) references client(clientName), FOREIGN KEY (asignatario) references agents (id), FOREIGN KEY (CIAfectado) references servers(hostname), FOREIGN KEY (servAfectado) references services(serviceName))")
	fillCases()

'''
Creates the table of events generated
idEvento: unique identifier of the event
descripcion: description of what is happening
codServicio: code of the affected ci
fecha: Date in which the event is generated
cliente: identifier of the client owner of the ci
'''
def createEventos():
	mycursor.execute("CREATE table eventos (idEvento int PRIMARY KEY auto_increment, descripcion LONGTEXT not null, codServicio VARCHAR(255),fecha datetime, cliente varchar(255), FOREIGN KEY (codServicio) references servers (codServicio), FOREIGN KEY (cliente) references `client` (nit) )")
	fillEvents()

'''
	# Creates the incidents table
'''
def createIncidents():
	mycursor.execute("CREATE table incidente (idIncidente VARCHAR(255) PRIMARY KEY, titulo VARCHAR(255), descripcion LONGTEXT not null, CIAfectado VARCHAR(255), contacto int, nombreContacto VARCHAR(255), compa침ia VARCHAR(255), categoria VARCHAR(255), subcategoria VARCHAR(255), GrupoAsignacion VARCHAR(255), Asignatario VARCHAR(255), accionActualizaci칩n LONGTEXT, IDInteraccion VARCHAR(255), fecha DATETIME, FOREIGN KEY (CIAfectado) references servers(hostname), FOREIGN KEY (contacto) references contact(id))")
	fillIncidents()

def createInteraction():
	fillInteraction()

def fillClient():
	columns = ('(nit, clientName)')
	with open('client.csv', 'r') as file:
		reader = csv.reader(file, delimiter = ';')
		for row in reader:
			mysql = "INSERT INTO client {tuple} VALUES ({values});".format(tuple = columns, values = '\'' + row[0] + '\', \'' + row[1] + '\'')
			#print(mysql)
			mycursor.execute(mysql)

def fillContact():
	columns = ('(id, contactName, clientId, password)')
	with open('contact.csv', 'r') as file:
		reader = csv.reader(file, delimiter = ';')
		for row in reader:
			mysql = "INSERT INTO {file} {tuple} VALUES ({values});".format(file = files[i], tuple = tuples[i], values = '\'' + row[0] + '\', \'' + row[1] + '\', \'' + row[2] + '\', \'' + row[3] + '\'')
			#print(mysql)
			mycursor.execute(mysql)

def fillServers():
	columns ='(codServicio, hostname, clientId)'
	with open('servers.csv', 'r') as file:
		reader = csv.reader(file, delimiter = ';')
		for row in reader:
			mysql = "INSERT INTO servers {tuple} VALUES ({values});".format(tuple = tuples[i], values = '\'' + row[0] + '\', \'' + row[1] + '\', \'' + row[2] + '\'')
			#print(mysql)
			mycursor.execute(mysql)

def fillServices():
	columns = '(serviceId, serviceName)'
	with open('services.csv', 'r') as file:
		reader = csv.reader(file, delimiter = ';')
		for row in reader:
			mysql = "INSERT INTO services {tuple} VALUES ({values});".format(tuple = tuples[i], values = row[0] + ', \'' + row[1] + '\'')
			#print(mysql)
			mycursor.execute(mysql)

def fillAgents():
	columns = '(id, nombre, ext)'
	with open('agents.csv', 'r') as file:
		reader = csv.reader(file, delimiter = ';')
		for row in reader:
			mysql = "INSERT INTO agents {tuple} VALUES ({values});".format(tuple = tuples[i], values = '\'' + row[0] + '\', \'' + row[1] + '\',' + row[2])
			#print(mysql)
			mycursor.execute(mysql)

def fillServicesInServer():
	columns = '(serviceId, codServicio)'
	with open('servicesInServer.csv', 'r') as file:
		reader = csv.reader(file, delimiter = ';')
		for row in reader:
			mysql = "INSERT INTO servicesInServer {tuple} VALUES ({values});".format(tuple = tuples[i], values = '\'' + row[0] + '\', \'' + row[1] + '\'')
			#print(mysql)
			mycursor.execute(mysql)

def fillCases():
	columns = '(numero, titulo, descripcion, faseActual, Estado, solicitante, NombreContacto, companiaNombre, GrupoAsignacion, asignatario, categoria, subcategoria, modelo, motivo, servAfectado, CIAfectado, impacto, urgencia, prioridad, origen, accionActualizaci칩n)'
	with open('cases.csv', 'r') as file:
		reader = csv.reader(file, delimiter = ';')
		for row in reader:
			mysql = "INSERT INTO cases {tuple} VALUES ({values});".format(tuple = tuples[i], values =  '\'' + row[0] + '\', \'' + row[1] + '\', \'' + row[2] + '\', \'' + row[3] + '\', \'' + row[4] + '\',' + row[5] + ', \'' + row[6] + '\', \''+ row[7] + '\', \'' + row[8] + '\', \'' + row[9] + '\', \'' + row[10] + '\', \''+ row[11] + '\', \'' + row[12] + '\', \'' + row[13] + '\', \'' + row[14] + '\', \'' + row[15] + '\', \''+ row[16] + '\', \'' + row[17] + '\', \'' + row[18] + '\',' + row[19] + ',\'' + row[20] + '\'')
			#print(mysql)
			mycursor.execute(mysql)

def fillEvents():
	columns = '(idEvento, descripcion, codServicio, fecha, cliente)'
	with open('eventos.csv', 'r') as file:
		reader = csv.reader(file, delimiter = ';')
		for row in reader:
			mysql = "INSERT INTO eventos {tuple} VALUES ({values});".format(tuple = columns, values = '\'' + row[0] + '\', \'' + row[1] + '\', \'' + row[2] + '\'' + row[3] + '\''+ row[5] + '\'')
			#print(mysql)
			mycursor.execute(mysql)

def fillIncidents():
	columns = '(idIncidente, titulo, descripcion, CIAfectado, contacto, nombreContacto, compa침ia, categoria , subcategoria, GrupoAsignacion, Asignatario, accionActualizaci칩n, IDInteraccion, fecha)'
	with open('incidente.csv', 'r') as file:
		reader = csv.reader(file, delimiter = ';')
		for row in reader:
			mysql = "INSERT INTO incidente {tuple} VALUES ({values});".format(tuple = columns, values = '\'' + row[0] + '\', \'' + row[1] + '\'')
			#print(mysql)
			mycursor.execute(mysql)

def fillInteraction():
	columns =
	with open('interaction.csv', 'r') as file:
		reader = csv.reader(file, delimiter = ';')
		for row in reader:
			mysql = "INSERT INTO interaction {tuple} VALUES ({values});".format(tuple = columns, values = '\'' + row[0] + '\', \'' + row[1] + '\'')
			#print(mysql)
			mycursor.execute(mysql)









'''
Calls the functions that creates and populates the tables
'''
def CreateTables ():
	createClient()
	createContact()
	createServers()
	createServices()
	createAgents()
	createServicesInServer()
	createCases()
	createEventos()
	createIncidents()
	createInteraction()